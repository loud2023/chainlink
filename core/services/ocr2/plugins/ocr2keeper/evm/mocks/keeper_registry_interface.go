// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	generated "github.com/smartcontractkit/chainlink/core/gethwrappers/generated"

	keeper_registry_wrapper2_0 "github.com/smartcontractkit/chainlink/core/gethwrappers/generated/keeper_registry_wrapper2_0"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// KeeperRegistryInterface is an autogenerated mock type for the KeeperRegistryInterface type
type KeeperRegistryInterface struct {
	mock.Mock
}

// AcceptOwnership provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptPayeeship provides a mock function with given fields: opts, transmitter
func (_m *KeeperRegistryInterface) AcceptPayeeship(opts *bind.TransactOpts, transmitter common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, transmitter)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, transmitter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, transmitter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptUpkeepAdmin provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) AcceptUpkeepAdmin(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddFunds provides a mock function with given fields: opts, id, amount
func (_m *KeeperRegistryInterface) AddFunds(opts *bind.TransactOpts, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id, amount)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, *big.Int) error); ok {
		r1 = rf(opts, id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Address provides a mock function with given fields:
func (_m *KeeperRegistryInterface) Address() common.Address {
	ret := _m.Called()

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// CancelUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) CancelUpkeep(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) CheckUpkeep(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fallback provides a mock function with given fields: opts, calldata
func (_m *KeeperRegistryInterface) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, calldata)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte) *types.Transaction); ok {
		r0 = rf(opts, calldata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []byte) error); ok {
		r1 = rf(opts, calldata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterCancelledUpkeepReport provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterCancelledUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReportIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReportIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReportIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReportIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterConfigSet provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterConfigSet(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryConfigSetIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryConfigSetIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryConfigSetIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryConfigSetIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterFundsAdded provides a mock function with given fields: opts, id, from
func (_m *KeeperRegistryInterface) FilterFundsAdded(opts *bind.FilterOpts, id []*big.Int, from []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryFundsAddedIterator, error) {
	ret := _m.Called(opts, id, from)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryFundsAddedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryFundsAddedIterator); ok {
		r0 = rf(opts, id, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryFundsAddedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []common.Address) error); ok {
		r1 = rf(opts, id, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterFundsWithdrawn provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterFundsWithdrawn(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawnIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawnIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawnIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawnIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterInsufficientFundsUpkeepReport provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterInsufficientFundsUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReportIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReportIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReportIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReportIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterOwnerFundsWithdrawn provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterOwnerFundsWithdrawn(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawnIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawnIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawnIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawnIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterOwnershipTransferRequested provides a mock function with given fields: opts, from, to
func (_m *KeeperRegistryInterface) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequestedIterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequestedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequestedIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequestedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterOwnershipTransferred provides a mock function with given fields: opts, from, to
func (_m *KeeperRegistryInterface) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferredIterator, error) {
	ret := _m.Called(opts, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferredIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferredIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferredIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPaused provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterPaused(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryPausedIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPausedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryPausedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPausedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPayeesUpdated provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterPayeesUpdated(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdatedIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdatedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdatedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdatedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPayeeshipTransferRequested provides a mock function with given fields: opts, transmitter, from, to
func (_m *KeeperRegistryInterface) FilterPayeeshipTransferRequested(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequestedIterator, error) {
	ret := _m.Called(opts, transmitter, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequestedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequestedIterator); ok {
		r0 = rf(opts, transmitter, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequestedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, transmitter, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPayeeshipTransferred provides a mock function with given fields: opts, transmitter, from, to
func (_m *KeeperRegistryInterface) FilterPayeeshipTransferred(opts *bind.FilterOpts, transmitter []common.Address, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferredIterator, error) {
	ret := _m.Called(opts, transmitter, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferredIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferredIterator); ok {
		r0 = rf(opts, transmitter, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferredIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, transmitter, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterPaymentWithdrawn provides a mock function with given fields: opts, transmitter, amount, to
func (_m *KeeperRegistryInterface) FilterPaymentWithdrawn(opts *bind.FilterOpts, transmitter []common.Address, amount []*big.Int, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawnIterator, error) {
	ret := _m.Called(opts, transmitter, amount, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawnIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []*big.Int, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawnIterator); ok {
		r0 = rf(opts, transmitter, amount, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawnIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []*big.Int, []common.Address) error); ok {
		r1 = rf(opts, transmitter, amount, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterReorgedUpkeepReport provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterReorgedUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReportIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReportIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReportIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReportIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterStaleUpkeepReport provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterStaleUpkeepReport(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReportIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReportIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReportIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReportIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterTransmitted provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterTransmitted(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryTransmittedIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryTransmittedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryTransmittedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryTransmittedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUnpaused provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) FilterUnpaused(opts *bind.FilterOpts) (*keeper_registry_wrapper2_0.KeeperRegistryUnpausedIterator, error) {
	ret := _m.Called(opts)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUnpausedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *keeper_registry_wrapper2_0.KeeperRegistryUnpausedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUnpausedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepAdminTransferRequested provides a mock function with given fields: opts, id, from, to
func (_m *KeeperRegistryInterface) FilterUpkeepAdminTransferRequested(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequestedIterator, error) {
	ret := _m.Called(opts, id, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequestedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequestedIterator); ok {
		r0 = rf(opts, id, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequestedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, id, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepAdminTransferred provides a mock function with given fields: opts, id, from, to
func (_m *KeeperRegistryInterface) FilterUpkeepAdminTransferred(opts *bind.FilterOpts, id []*big.Int, from []common.Address, to []common.Address) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferredIterator, error) {
	ret := _m.Called(opts, id, from, to)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferredIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferredIterator); ok {
		r0 = rf(opts, id, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferredIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, id, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepCanceled provides a mock function with given fields: opts, id, atBlockHeight
func (_m *KeeperRegistryInterface) FilterUpkeepCanceled(opts *bind.FilterOpts, id []*big.Int, atBlockHeight []uint64) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceledIterator, error) {
	ret := _m.Called(opts, id, atBlockHeight)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceledIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []uint64) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceledIterator); ok {
		r0 = rf(opts, id, atBlockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceledIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []uint64) error); ok {
		r1 = rf(opts, id, atBlockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepCheckDataUpdated provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepCheckDataUpdated(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdatedIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdatedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdatedIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdatedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepGasLimitSet provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepGasLimitSet(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSetIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSetIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSetIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSetIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepMigrated provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepMigrated(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigratedIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigratedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigratedIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigratedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepOffchainConfigSet provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepOffchainConfigSet(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSetIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSetIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSetIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSetIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepPaused provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepPaused(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPausedIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPausedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPausedIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPausedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepPerformed provides a mock function with given fields: opts, id, success
func (_m *KeeperRegistryInterface) FilterUpkeepPerformed(opts *bind.FilterOpts, id []*big.Int, success []bool) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformedIterator, error) {
	ret := _m.Called(opts, id, success)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int, []bool) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformedIterator); ok {
		r0 = rf(opts, id, success)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int, []bool) error); ok {
		r1 = rf(opts, id, success)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepReceived provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepReceived(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceivedIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceivedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceivedIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceivedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepRegistered provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepRegistered(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegisteredIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegisteredIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegisteredIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegisteredIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUpkeepUnpaused provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) FilterUpkeepUnpaused(opts *bind.FilterOpts, id []*big.Int) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpausedIterator, error) {
	ret := _m.Called(opts, id)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpausedIterator
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []*big.Int) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpausedIterator); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpausedIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []*big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveUpkeepIDs provides a mock function with given fields: opts, startIndex, maxCount
func (_m *KeeperRegistryInterface) GetActiveUpkeepIDs(opts *bind.CallOpts, startIndex *big.Int, maxCount *big.Int) ([]*big.Int, error) {
	ret := _m.Called(opts, startIndex, maxCount)

	var r0 []*big.Int
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int, *big.Int) []*big.Int); ok {
		r0 = rf(opts, startIndex, maxCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int, *big.Int) error); ok {
		r1 = rf(opts, startIndex, maxCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFastGasFeedAddress provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetFastGasFeedAddress(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeeperRegistryLogicAddress provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetKeeperRegistryLogicAddress(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkAddress provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetLinkAddress(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkNativeFeedAddress provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetLinkNativeFeedAddress(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxPaymentForGas provides a mock function with given fields: opts, gasLimit
func (_m *KeeperRegistryInterface) GetMaxPaymentForGas(opts *bind.CallOpts, gasLimit uint32) (*big.Int, error) {
	ret := _m.Called(opts, gasLimit)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, uint32) *big.Int); ok {
		r0 = rf(opts, gasLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, uint32) error); ok {
		r1 = rf(opts, gasLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinBalanceForUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) GetMinBalanceForUpkeep(opts *bind.CallOpts, id *big.Int) (*big.Int, error) {
	ret := _m.Called(opts, id)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) *big.Int); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMode provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetMode(opts *bind.CallOpts) (uint8, error) {
	ret := _m.Called(opts)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) uint8); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeerRegistryMigrationPermission provides a mock function with given fields: opts, peer
func (_m *KeeperRegistryInterface) GetPeerRegistryMigrationPermission(opts *bind.CallOpts, peer common.Address) (uint8, error) {
	ret := _m.Called(opts, peer)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) uint8); ok {
		r0 = rf(opts, peer)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, peer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignerInfo provides a mock function with given fields: opts, query
func (_m *KeeperRegistryInterface) GetSignerInfo(opts *bind.CallOpts, query common.Address) (keeper_registry_wrapper2_0.GetSignerInfo, error) {
	ret := _m.Called(opts, query)

	var r0 keeper_registry_wrapper2_0.GetSignerInfo
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) keeper_registry_wrapper2_0.GetSignerInfo); ok {
		r0 = rf(opts, query)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.GetSignerInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) GetState(opts *bind.CallOpts) (keeper_registry_wrapper2_0.GetState, error) {
	ret := _m.Called(opts)

	var r0 keeper_registry_wrapper2_0.GetState
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) keeper_registry_wrapper2_0.GetState); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.GetState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransmitterInfo provides a mock function with given fields: opts, query
func (_m *KeeperRegistryInterface) GetTransmitterInfo(opts *bind.CallOpts, query common.Address) (keeper_registry_wrapper2_0.GetTransmitterInfo, error) {
	ret := _m.Called(opts, query)

	var r0 keeper_registry_wrapper2_0.GetTransmitterInfo
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) keeper_registry_wrapper2_0.GetTransmitterInfo); ok {
		r0 = rf(opts, query)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.GetTransmitterInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) GetUpkeep(opts *bind.CallOpts, id *big.Int) (keeper_registry_wrapper2_0.UpkeepInfo, error) {
	ret := _m.Called(opts, id)

	var r0 keeper_registry_wrapper2_0.UpkeepInfo
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) keeper_registry_wrapper2_0.UpkeepInfo); ok {
		r0 = rf(opts, id)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.UpkeepInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestConfigDetails provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) LatestConfigDetails(opts *bind.CallOpts) (keeper_registry_wrapper2_0.LatestConfigDetails, error) {
	ret := _m.Called(opts)

	var r0 keeper_registry_wrapper2_0.LatestConfigDetails
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) keeper_registry_wrapper2_0.LatestConfigDetails); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.LatestConfigDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestConfigDigestAndEpoch provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (keeper_registry_wrapper2_0.LatestConfigDigestAndEpoch, error) {
	ret := _m.Called(opts)

	var r0 keeper_registry_wrapper2_0.LatestConfigDigestAndEpoch
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) keeper_registry_wrapper2_0.LatestConfigDigestAndEpoch); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(keeper_registry_wrapper2_0.LatestConfigDigestAndEpoch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateUpkeeps provides a mock function with given fields: opts, ids, destination
func (_m *KeeperRegistryInterface) MigrateUpkeeps(opts *bind.TransactOpts, ids []*big.Int, destination common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, ids, destination)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []*big.Int, common.Address) *types.Transaction); ok {
		r0 = rf(opts, ids, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []*big.Int, common.Address) error); ok {
		r1 = rf(opts, ids, destination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnTokenTransfer provides a mock function with given fields: opts, sender, amount, data
func (_m *KeeperRegistryInterface) OnTokenTransfer(opts *bind.TransactOpts, sender common.Address, amount *big.Int, data []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, sender, amount, data)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, sender, amount, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, *big.Int, []byte) error); ok {
		r1 = rf(opts, sender, amount, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Owner provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	var r0 common.Address
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseCancelledUpkeepReport provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseCancelledUpkeepReport(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseConfigSet provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseConfigSet(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryConfigSet, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryConfigSet
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryConfigSet); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryConfigSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseFundsAdded provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseFundsAdded(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryFundsAdded, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryFundsAdded
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryFundsAdded); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryFundsAdded)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseFundsWithdrawn provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseFundsWithdrawn(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseInsufficientFundsUpkeepReport provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseInsufficientFundsUpkeepReport(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseLog provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseLog(log types.Log) (generated.AbigenLog, error) {
	ret := _m.Called(log)

	var r0 generated.AbigenLog
	if rf, ok := ret.Get(0).(func(types.Log) generated.AbigenLog); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.AbigenLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseOwnerFundsWithdrawn provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseOwnerFundsWithdrawn(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseOwnershipTransferRequested provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseOwnershipTransferRequested(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseOwnershipTransferred provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseOwnershipTransferred(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePaused provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParsePaused(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryPaused, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPaused
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryPaused); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPaused)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePayeesUpdated provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParsePayeesUpdated(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePayeeshipTransferRequested provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParsePayeeshipTransferRequested(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePayeeshipTransferred provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParsePayeeshipTransferred(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePaymentWithdrawn provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParsePaymentWithdrawn(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseReorgedUpkeepReport provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseReorgedUpkeepReport(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseStaleUpkeepReport provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseStaleUpkeepReport(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTransmitted provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseTransmitted(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryTransmitted, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryTransmitted
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryTransmitted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryTransmitted)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUnpaused provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUnpaused(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUnpaused, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUnpaused
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUnpaused); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUnpaused)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepAdminTransferRequested provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepAdminTransferRequested(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepAdminTransferred provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepAdminTransferred(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepCanceled provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepCanceled(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepCheckDataUpdated provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepCheckDataUpdated(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepGasLimitSet provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepGasLimitSet(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepMigrated provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepMigrated(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepOffchainConfigSet provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepOffchainConfigSet(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepPaused provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepPaused(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepPerformed provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepPerformed(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepReceived provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepReceived(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepRegistered provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepRegistered(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseUpkeepUnpaused provides a mock function with given fields: log
func (_m *KeeperRegistryInterface) ParseUpkeepUnpaused(log types.Log) (*keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused, error) {
	ret := _m.Called(log)

	var r0 *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused
	if rf, ok := ret.Get(0).(func(types.Log) *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pause provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) PauseUpkeep(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Receive provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveUpkeeps provides a mock function with given fields: opts, encodedUpkeeps
func (_m *KeeperRegistryInterface) ReceiveUpkeeps(opts *bind.TransactOpts, encodedUpkeeps []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, encodedUpkeeps)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte) *types.Transaction); ok {
		r0 = rf(opts, encodedUpkeeps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []byte) error); ok {
		r1 = rf(opts, encodedUpkeeps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecoverFunds provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) RecoverFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUpkeep provides a mock function with given fields: opts, target, gasLimit, admin, checkData, offchainConfig
func (_m *KeeperRegistryInterface) RegisterUpkeep(opts *bind.TransactOpts, target common.Address, gasLimit uint32, admin common.Address, checkData []byte, offchainConfig []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, target, gasLimit, admin, checkData, offchainConfig)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, uint32, common.Address, []byte, []byte) *types.Transaction); ok {
		r0 = rf(opts, target, gasLimit, admin, checkData, offchainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, uint32, common.Address, []byte, []byte) error); ok {
		r1 = rf(opts, target, gasLimit, admin, checkData, offchainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetConfig provides a mock function with given fields: opts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig
func (_m *KeeperRegistryInterface) SetConfig(opts *bind.TransactOpts, signers []common.Address, transmitters []common.Address, f uint8, onchainConfig []byte, offchainConfigVersion uint64, offchainConfig []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []common.Address, []common.Address, uint8, []byte, uint64, []byte) *types.Transaction); ok {
		r0 = rf(opts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []common.Address, []common.Address, uint8, []byte, uint64, []byte) error); ok {
		r1 = rf(opts, signers, transmitters, f, onchainConfig, offchainConfigVersion, offchainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPayees provides a mock function with given fields: opts, payees
func (_m *KeeperRegistryInterface) SetPayees(opts *bind.TransactOpts, payees []common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, payees)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []common.Address) *types.Transaction); ok {
		r0 = rf(opts, payees)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []common.Address) error); ok {
		r1 = rf(opts, payees)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPeerRegistryMigrationPermission provides a mock function with given fields: opts, peer, permission
func (_m *KeeperRegistryInterface) SetPeerRegistryMigrationPermission(opts *bind.TransactOpts, peer common.Address, permission uint8) (*types.Transaction, error) {
	ret := _m.Called(opts, peer, permission)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, uint8) *types.Transaction); ok {
		r0 = rf(opts, peer, permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, uint8) error); ok {
		r1 = rf(opts, peer, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUpkeepGasLimit provides a mock function with given fields: opts, id, gasLimit
func (_m *KeeperRegistryInterface) SetUpkeepGasLimit(opts *bind.TransactOpts, id *big.Int, gasLimit uint32) (*types.Transaction, error) {
	ret := _m.Called(opts, id, gasLimit)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, uint32) *types.Transaction); ok {
		r0 = rf(opts, id, gasLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, uint32) error); ok {
		r1 = rf(opts, id, gasLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUpkeepOffchainConfig provides a mock function with given fields: opts, id, config
func (_m *KeeperRegistryInterface) SetUpkeepOffchainConfig(opts *bind.TransactOpts, id *big.Int, config []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, id, config)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, id, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, []byte) error); ok {
		r1 = rf(opts, id, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulatePerformUpkeep provides a mock function with given fields: opts, id, performData
func (_m *KeeperRegistryInterface) SimulatePerformUpkeep(opts *bind.TransactOpts, id *big.Int, performData []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, id, performData)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, id, performData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, []byte) error); ok {
		r1 = rf(opts, id, performData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferOwnership provides a mock function with given fields: opts, to
func (_m *KeeperRegistryInterface) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, to)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferPayeeship provides a mock function with given fields: opts, transmitter, proposed
func (_m *KeeperRegistryInterface) TransferPayeeship(opts *bind.TransactOpts, transmitter common.Address, proposed common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, transmitter, proposed)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address) *types.Transaction); ok {
		r0 = rf(opts, transmitter, proposed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address) error); ok {
		r1 = rf(opts, transmitter, proposed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferUpkeepAdmin provides a mock function with given fields: opts, id, proposed
func (_m *KeeperRegistryInterface) TransferUpkeepAdmin(opts *bind.TransactOpts, id *big.Int, proposed common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, id, proposed)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, common.Address) *types.Transaction); ok {
		r0 = rf(opts, id, proposed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, common.Address) error); ok {
		r1 = rf(opts, id, proposed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transmit provides a mock function with given fields: opts, reportContext, rawReport, rs, ss, rawVs
func (_m *KeeperRegistryInterface) Transmit(opts *bind.TransactOpts, reportContext [3][32]byte, rawReport []byte, rs [][32]byte, ss [][32]byte, rawVs [32]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, reportContext, rawReport, rs, ss, rawVs)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [3][32]byte, []byte, [][32]byte, [][32]byte, [32]byte) *types.Transaction); ok {
		r0 = rf(opts, reportContext, rawReport, rs, ss, rawVs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [3][32]byte, []byte, [][32]byte, [][32]byte, [32]byte) error); ok {
		r1 = rf(opts, reportContext, rawReport, rs, ss, rawVs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TypeAndVersion provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	ret := _m.Called(opts)

	var r0 string
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unpause provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpauseUpkeep provides a mock function with given fields: opts, id
func (_m *KeeperRegistryInterface) UnpauseUpkeep(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, id)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCheckData provides a mock function with given fields: opts, id, newCheckData
func (_m *KeeperRegistryInterface) UpdateCheckData(opts *bind.TransactOpts, id *big.Int, newCheckData []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, id, newCheckData)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, []byte) *types.Transaction); ok {
		r0 = rf(opts, id, newCheckData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, []byte) error); ok {
		r1 = rf(opts, id, newCheckData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpkeepTranscoderVersion provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) UpkeepTranscoderVersion(opts *bind.CallOpts) (uint8, error) {
	ret := _m.Called(opts)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) uint8); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpkeepVersion provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) UpkeepVersion(opts *bind.CallOpts) (uint8, error) {
	ret := _m.Called(opts)

	var r0 uint8
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) uint8); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchCancelledUpkeepReport provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchCancelledUpkeepReport(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryCancelledUpkeepReport, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchConfigSet provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryConfigSet) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryConfigSet) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryConfigSet) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchFundsAdded provides a mock function with given fields: opts, sink, id, from
func (_m *KeeperRegistryInterface) WatchFundsAdded(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsAdded, id []*big.Int, from []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id, from)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsAdded, []*big.Int, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, id, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsAdded, []*big.Int, []common.Address) error); ok {
		r1 = rf(opts, sink, id, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchFundsWithdrawn provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryFundsWithdrawn, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchInsufficientFundsUpkeepReport provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchInsufficientFundsUpkeepReport(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryInsufficientFundsUpkeepReport, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOwnerFundsWithdrawn provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchOwnerFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnerFundsWithdrawn) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOwnershipTransferRequested provides a mock function with given fields: opts, sink, from, to
func (_m *KeeperRegistryInterface) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferRequested, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOwnershipTransferred provides a mock function with given fields: opts, sink, from, to
func (_m *KeeperRegistryInterface) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryOwnershipTransferred, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchPaused provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchPaused(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaused) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaused) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaused) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchPayeesUpdated provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchPayeesUpdated(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeesUpdated) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchPayeeshipTransferRequested provides a mock function with given fields: opts, sink, transmitter, from, to
func (_m *KeeperRegistryInterface) WatchPayeeshipTransferRequested(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, transmitter, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested, []common.Address, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, transmitter, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferRequested, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, transmitter, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchPayeeshipTransferred provides a mock function with given fields: opts, sink, transmitter, from, to
func (_m *KeeperRegistryInterface) WatchPayeeshipTransferred(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred, transmitter []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, transmitter, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred, []common.Address, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, transmitter, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPayeeshipTransferred, []common.Address, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, transmitter, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchPaymentWithdrawn provides a mock function with given fields: opts, sink, transmitter, amount, to
func (_m *KeeperRegistryInterface) WatchPaymentWithdrawn(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn, transmitter []common.Address, amount []*big.Int, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, transmitter, amount, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn, []common.Address, []*big.Int, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, transmitter, amount, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryPaymentWithdrawn, []common.Address, []*big.Int, []common.Address) error); ok {
		r1 = rf(opts, sink, transmitter, amount, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchReorgedUpkeepReport provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchReorgedUpkeepReport(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryReorgedUpkeepReport, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchStaleUpkeepReport provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchStaleUpkeepReport(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryStaleUpkeepReport, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchTransmitted provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryTransmitted) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryTransmitted) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryTransmitted) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUnpaused provides a mock function with given fields: opts, sink
func (_m *KeeperRegistryInterface) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUnpaused) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUnpaused) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUnpaused) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepAdminTransferRequested provides a mock function with given fields: opts, sink, id, from, to
func (_m *KeeperRegistryInterface) WatchUpkeepAdminTransferRequested(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested, []*big.Int, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, id, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferRequested, []*big.Int, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, id, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepAdminTransferred provides a mock function with given fields: opts, sink, id, from, to
func (_m *KeeperRegistryInterface) WatchUpkeepAdminTransferred(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred, id []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id, from, to)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred, []*big.Int, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, id, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepAdminTransferred, []*big.Int, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, id, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepCanceled provides a mock function with given fields: opts, sink, id, atBlockHeight
func (_m *KeeperRegistryInterface) WatchUpkeepCanceled(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled, id []*big.Int, atBlockHeight []uint64) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id, atBlockHeight)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled, []*big.Int, []uint64) event.Subscription); ok {
		r0 = rf(opts, sink, id, atBlockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCanceled, []*big.Int, []uint64) error); ok {
		r1 = rf(opts, sink, id, atBlockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepCheckDataUpdated provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepCheckDataUpdated(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepCheckDataUpdated, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepGasLimitSet provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepGasLimitSet(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepGasLimitSet, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepMigrated provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepMigrated(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepMigrated, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepOffchainConfigSet provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepOffchainConfigSet(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepOffchainConfigSet, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepPaused provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepPaused(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPaused, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepPerformed provides a mock function with given fields: opts, sink, id, success
func (_m *KeeperRegistryInterface) WatchUpkeepPerformed(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed, id []*big.Int, success []bool) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id, success)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed, []*big.Int, []bool) event.Subscription); ok {
		r0 = rf(opts, sink, id, success)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepPerformed, []*big.Int, []bool) error); ok {
		r1 = rf(opts, sink, id, success)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepReceived provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepReceived(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepReceived, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepRegistered provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepRegistered(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepRegistered, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchUpkeepUnpaused provides a mock function with given fields: opts, sink, id
func (_m *KeeperRegistryInterface) WatchUpkeepUnpaused(opts *bind.WatchOpts, sink chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused, id []*big.Int) (event.Subscription, error) {
	ret := _m.Called(opts, sink, id)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused, []*big.Int) event.Subscription); ok {
		r0 = rf(opts, sink, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *keeper_registry_wrapper2_0.KeeperRegistryUpkeepUnpaused, []*big.Int) error); ok {
		r1 = rf(opts, sink, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawFunds provides a mock function with given fields: opts, id, to
func (_m *KeeperRegistryInterface) WithdrawFunds(opts *bind.TransactOpts, id *big.Int, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, id, to)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, common.Address) *types.Transaction); ok {
		r0 = rf(opts, id, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, common.Address) error); ok {
		r1 = rf(opts, id, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawOwnerFunds provides a mock function with given fields: opts
func (_m *KeeperRegistryInterface) WithdrawOwnerFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawPayment provides a mock function with given fields: opts, from, to
func (_m *KeeperRegistryInterface) WithdrawPayment(opts *bind.TransactOpts, from common.Address, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, from, to)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address) *types.Transaction); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
